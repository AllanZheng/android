package uk.ac.aber.cs221.group11.activities;
import uk.ac.aber.cs211.group11.data;

/**
 * Outline for the class responsible for the login page
 * /
public class Activity_Login {
	private TextField username; //Takes username input
	private TextField password; //Takes password input
	private Button login; //Submits user data to login
	private Button register; //Navigates user to registration activity
	private Button workOffline; //Work without internet connection

	/**
	 * Takes the user to the Register screen
	 * @param v the current view
	 */
	public void toRegisterActivity(View v);
	
	/**
	 * Takes the user to the main menu screen
	 * @param v the current view
	 */
	public void toMainMenu(View v);
	
	/**
	 * Gets the data from form input on the page
	 * @param v the current view
	 */
	public void getPageData(View v);

	/**
	 * Checks the login details against those already in the database
	 * @return true if login details are correct, false if they are not
	 */
	public boolean checkLoginDetails();
}

/**
 * Outline for the class responsible for the registration screen
 */
public class Activity_Register {
	private Textfield username; //Takes username input
	private TextField password; //Takes password input
	private TextField confirmPassword; //A second password input
	private Button createAccount; //Submits data from user input

	/**
	 * Takes the user to the createAccount screen
	 * @param v the current view
	 */
	public void createAccount(View v);
	
	/**
	 * Takes the user to the MainMenu screen
	 * @param v the current view
	 */
	public void toMainMenu(View v);
	
	/**
	 * Gets the data from form input on the page
	 * @param v the current view
	 */
	public void getPageData(View v);
	
	/**
	 * Checks if the account already exists in the system
	 * @return true if the account exists, false if not
	 */
	public boolean checkIfAccountExists();
	/**
	 * Checks if the password and re-enter password fields match
	 * @return true if the passwords match, false if not
	 */
	public boolean checkIfPasswordsMatch();

}

/**
 * Outline for class responsible for the main menu
 */
public class Activity_MainMenu {
	private ButtonContainer smallButtons; //Holds small buttons on activity
	private ButtonContainer largeButtons; //Holds large buttons on activity
	private RecordingsQueue recordingQueue; //Recordings to be uploaded

	/**
	 * Takes the user to the Recordings screen
	 * @param v the current view
	 */
	public void toRecordings(View v);
	
	/**
	 * Takes the user to the PlantSpecies screen
	 * @param v the current view
	 */
	public void toPlantSpecies(View v);
	
	/**
	 * Takes the user to the EditRecordings screen
	 * @param v the current view
	 */
	public void toEditRecordings(View v);
	
	/**
	 * Takes the user to the logout screen
	 * @param v the current view
	 */
	public void logout(View v);
}

/**
 * Outline for class responsible for viewing recordings
 */
public class Activity_Recordings {
	private ImageContainer imageContainer; //Displays image of recording
	private TextField name; //Recording name
	private TextField reserve; //Recording reserve
	private TextField plant; //Plant associated with recording
	private Textfield longitude; //Recording longitude
	private Textfield latitude; //Recording latitude
	private TextArea notes; //Notes on recording

	/**
	 * Takes the user to the PlantSpecies screen
	 * @param v the current view
	 */
	public void toPlantSpecies(View v);
	
	/**
	 * Takes the user to the MainMenu screen
	 * @param v the current view
	 */
	public void toMainMenu(View v);
	
	/**
	 * Gets the data from form input on the page
	 * @param v the current view
	 */
	public void getPageData(View v);
	


	/**
	 * Takes data from the current view
	 * @param v the current view
	 */
	public void getData(View v);
	
	/**
	 * Gets the current date to be added to the database
	 */
	public void getDate();
	
	/**
	 * Sets up the system ready to take a recording
	 * @return the recording
	 */
	public Recording constructRecordings();
	
}
 
